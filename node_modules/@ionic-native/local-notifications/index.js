var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';
/**
 * @name Local Notifications
 * @description
 * This plugin allows you to display local notifications on the device
 *
 * @usage
 * ```typescript
 * import { LocalNotifications } from '@ionic-native/local-notifications';
 *
 *
 * constructor(private localNotifications: LocalNotifications) { }
 *
 * ...
 *
 *
 * // Schedule a single notification
 * this.localNotifications.schedule({
 *   id: 1,
 *   text: 'Single ILocalNotification',
 *   sound: isAndroid? 'file://sound.mp3': 'file://beep.caf',
 *   data: { secret: key }
 * });
 *
 *
 * // Schedule multiple notifications
 * this.localNotifications.schedule([{
 *    id: 1,
 *    text: 'Multi ILocalNotification 1',
 *    sound: isAndroid ? 'file://sound.mp3': 'file://beep.caf',
 *    data: { secret:key }
 *   },{
 *    id: 2,
 *    title: 'Local ILocalNotification Example',
 *    text: 'Multi ILocalNotification 2',
 *    icon: 'http://example.com/icon.png'
 * }]);
 *
 *
 * // Schedule delayed notification
 * this.localNotifications.schedule({
 *    text: 'Delayed ILocalNotification',
 *    at: new Date(new Date().getTime() + 3600),
 *    led: 'FF0000',
 *    sound: null
 * });
 * ```
 * @interfaces
 * ILocalNotification
 */
var LocalNotifications = (function (_super) {
    __extends(LocalNotifications, _super);
    function LocalNotifications() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Schedules a single or multiple notifications
     * @param options {Notification | Array<ILocalNotification>} optional
     */
    /**
       * Schedules a single or multiple notifications
       * @param options {Notification | Array<ILocalNotification>} optional
       */
    LocalNotifications.prototype.schedule = /**
       * Schedules a single or multiple notifications
       * @param options {Notification | Array<ILocalNotification>} optional
       */
    function (options) { };
    /**
     * Updates a previously scheduled notification. Must include the id in the options parameter.
     * @param options {ILocalNotification} optional
     */
    /**
       * Updates a previously scheduled notification. Must include the id in the options parameter.
       * @param options {ILocalNotification} optional
       */
    LocalNotifications.prototype.update = /**
       * Updates a previously scheduled notification. Must include the id in the options parameter.
       * @param options {ILocalNotification} optional
       */
    function (options) { };
    /**
     * Clears single or multiple notifications
     * @param notificationId {any} A single notification id, or an array of notification ids.
     * @returns {Promise<any>} Returns a promise when the notification had been cleared
     */
    /**
       * Clears single or multiple notifications
       * @param notificationId {any} A single notification id, or an array of notification ids.
       * @returns {Promise<any>} Returns a promise when the notification had been cleared
       */
    LocalNotifications.prototype.clear = /**
       * Clears single or multiple notifications
       * @param notificationId {any} A single notification id, or an array of notification ids.
       * @returns {Promise<any>} Returns a promise when the notification had been cleared
       */
    function (notificationId) { return; };
    /**
     * Clears all notifications
     * @returns {Promise<any>} Returns a promise when all notifications have cleared
     */
    /**
       * Clears all notifications
       * @returns {Promise<any>} Returns a promise when all notifications have cleared
       */
    LocalNotifications.prototype.clearAll = /**
       * Clears all notifications
       * @returns {Promise<any>} Returns a promise when all notifications have cleared
       */
    function () { return; };
    /**
     * Cancels single or multiple notifications
     * @param notificationId {any} A single notification id, or an array of notification ids.
     * @returns {Promise<any>} Returns a promise when the notification is canceled
     */
    /**
       * Cancels single or multiple notifications
       * @param notificationId {any} A single notification id, or an array of notification ids.
       * @returns {Promise<any>} Returns a promise when the notification is canceled
       */
    LocalNotifications.prototype.cancel = /**
       * Cancels single or multiple notifications
       * @param notificationId {any} A single notification id, or an array of notification ids.
       * @returns {Promise<any>} Returns a promise when the notification is canceled
       */
    function (notificationId) { return; };
    /**
     * Cancels all notifications
     * @returns {Promise<any>} Returns a promise when all notifications are canceled
     */
    /**
       * Cancels all notifications
       * @returns {Promise<any>} Returns a promise when all notifications are canceled
       */
    LocalNotifications.prototype.cancelAll = /**
       * Cancels all notifications
       * @returns {Promise<any>} Returns a promise when all notifications are canceled
       */
    function () { return; };
    /**
     * Checks presence of a notification
     * @param notificationId {number}
     * @returns {Promise<boolean>}
     */
    /**
       * Checks presence of a notification
       * @param notificationId {number}
       * @returns {Promise<boolean>}
       */
    LocalNotifications.prototype.isPresent = /**
       * Checks presence of a notification
       * @param notificationId {number}
       * @returns {Promise<boolean>}
       */
    function (notificationId) { return; };
    /**
     * Checks is a notification is scheduled
     * @param notificationId {number}
     * @returns {Promise<boolean>}
     */
    /**
       * Checks is a notification is scheduled
       * @param notificationId {number}
       * @returns {Promise<boolean>}
       */
    LocalNotifications.prototype.isScheduled = /**
       * Checks is a notification is scheduled
       * @param notificationId {number}
       * @returns {Promise<boolean>}
       */
    function (notificationId) { return; };
    /**
     * Checks if a notification is triggered
     * @param notificationId {number}
     * @returns {Promise<boolean>}
     */
    /**
       * Checks if a notification is triggered
       * @param notificationId {number}
       * @returns {Promise<boolean>}
       */
    LocalNotifications.prototype.isTriggered = /**
       * Checks if a notification is triggered
       * @param notificationId {number}
       * @returns {Promise<boolean>}
       */
    function (notificationId) { return; };
    /**
     * Get all the notification ids
     * @returns {Promise<Array<number>>}
     */
    /**
       * Get all the notification ids
       * @returns {Promise<Array<number>>}
       */
    LocalNotifications.prototype.getAllIds = /**
       * Get all the notification ids
       * @returns {Promise<Array<number>>}
       */
    function () { return; };
    /**
     * Get the ids of triggered notifications
     * @returns {Promise<Array<number>>}
     */
    /**
       * Get the ids of triggered notifications
       * @returns {Promise<Array<number>>}
       */
    LocalNotifications.prototype.getTriggeredIds = /**
       * Get the ids of triggered notifications
       * @returns {Promise<Array<number>>}
       */
    function () { return; };
    /**
     * Get the ids of scheduled notifications
     * @returns {Promise<Array<number>>} Returns a promise
     */
    /**
       * Get the ids of scheduled notifications
       * @returns {Promise<Array<number>>} Returns a promise
       */
    LocalNotifications.prototype.getScheduledIds = /**
       * Get the ids of scheduled notifications
       * @returns {Promise<Array<number>>} Returns a promise
       */
    function () { return; };
    /**
     * Get a notification object
     * @param notificationId {any} The id of the notification to get
     * @returns {Promise<ILocalNotification>}
     */
    /**
       * Get a notification object
       * @param notificationId {any} The id of the notification to get
       * @returns {Promise<ILocalNotification>}
       */
    LocalNotifications.prototype.get = /**
       * Get a notification object
       * @param notificationId {any} The id of the notification to get
       * @returns {Promise<ILocalNotification>}
       */
    function (notificationId) { return; };
    /**
     * Get a scheduled notification object
     * @param notificationId {any} The id of the notification to get
     * @returns {Promise<ILocalNotification>}
     */
    /**
       * Get a scheduled notification object
       * @param notificationId {any} The id of the notification to get
       * @returns {Promise<ILocalNotification>}
       */
    LocalNotifications.prototype.getScheduled = /**
       * Get a scheduled notification object
       * @param notificationId {any} The id of the notification to get
       * @returns {Promise<ILocalNotification>}
       */
    function (notificationId) { return; };
    /**
     * Get a triggered notification object
     * @param notificationId The id of the notification to get
     * @returns {Promise<ILocalNotification>}
     */
    /**
       * Get a triggered notification object
       * @param notificationId The id of the notification to get
       * @returns {Promise<ILocalNotification>}
       */
    LocalNotifications.prototype.getTriggered = /**
       * Get a triggered notification object
       * @param notificationId The id of the notification to get
       * @returns {Promise<ILocalNotification>}
       */
    function (notificationId) { return; };
    /**
     * Get all notification objects
     * @returns {Promise<Array<ILocalNotification>>}
     */
    /**
       * Get all notification objects
       * @returns {Promise<Array<ILocalNotification>>}
       */
    LocalNotifications.prototype.getAll = /**
       * Get all notification objects
       * @returns {Promise<Array<ILocalNotification>>}
       */
    function () { return; };
    /**
     * Get all scheduled notification objects
     * @returns {Promise<Array<ILocalNotification>>}
     */
    /**
       * Get all scheduled notification objects
       * @returns {Promise<Array<ILocalNotification>>}
       */
    LocalNotifications.prototype.getAllScheduled = /**
       * Get all scheduled notification objects
       * @returns {Promise<Array<ILocalNotification>>}
       */
    function () { return; };
    /**
     * Get all triggered notification objects
     * @returns {Promise<Array<ILocalNotification>>}
     */
    /**
       * Get all triggered notification objects
       * @returns {Promise<Array<ILocalNotification>>}
       */
    LocalNotifications.prototype.getAllTriggered = /**
       * Get all triggered notification objects
       * @returns {Promise<Array<ILocalNotification>>}
       */
    function () { return; };
    /**
     * Register permission to show notifications if not already granted.
     * @returns {Promise<boolean>}
     */
    /**
       * Register permission to show notifications if not already granted.
       * @returns {Promise<boolean>}
       */
    LocalNotifications.prototype.registerPermission = /**
       * Register permission to show notifications if not already granted.
       * @returns {Promise<boolean>}
       */
    function () { return; };
    /**
     * Informs if the app has the permission to show notifications.
     * @returns {Promise<boolean>}
     */
    /**
       * Informs if the app has the permission to show notifications.
       * @returns {Promise<boolean>}
       */
    LocalNotifications.prototype.hasPermission = /**
       * Informs if the app has the permission to show notifications.
       * @returns {Promise<boolean>}
       */
    function () { return; };
    /**
     * Sets a callback for a specific event
     * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall
     * @param callback Call back function. All events return notification and state parameter. clear and clearall return state parameter only.
     */
    /**
       * Sets a callback for a specific event
       * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall
       * @param callback Call back function. All events return notification and state parameter. clear and clearall return state parameter only.
       */
    LocalNotifications.prototype.on = /**
       * Sets a callback for a specific event
       * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall
       * @param callback Call back function. All events return notification and state parameter. clear and clearall return state parameter only.
       */
    function (eventName, callback) { };
    /**
     * Removes a callback of a specific event
     * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall
     * @param callback Call back function. All events return notification and state parameter. clear and clearall return state parameter only.
     */
    /**
       * Removes a callback of a specific event
       * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall
       * @param callback Call back function. All events return notification and state parameter. clear and clearall return state parameter only.
       */
    LocalNotifications.prototype.un = /**
       * Removes a callback of a specific event
       * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall
       * @param callback Call back function. All events return notification and state parameter. clear and clearall return state parameter only.
       */
    function (eventName, callback) { };
    LocalNotifications.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LocalNotifications.ctorParameters = function () { return []; };
    __decorate([
        Cordova({
            sync: true
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], LocalNotifications.prototype, "schedule", null);
    __decorate([
        Cordova({
            sync: true
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], LocalNotifications.prototype, "update", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "clear", null);
    __decorate([
        Cordova({
            successIndex: 0,
            errorIndex: 2
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "clearAll", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "cancel", null);
    __decorate([
        Cordova({
            successIndex: 0,
            errorIndex: 2
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "cancelAll", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "isPresent", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "isScheduled", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "isTriggered", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "getAllIds", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "getTriggeredIds", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "getScheduledIds", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "get", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "getScheduled", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "getTriggered", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "getAll", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "getAllScheduled", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "getAllTriggered", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "registerPermission", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], LocalNotifications.prototype, "hasPermission", null);
    __decorate([
        Cordova({
            sync: true
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", void 0)
    ], LocalNotifications.prototype, "on", null);
    __decorate([
        Cordova({
            sync: true
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", void 0)
    ], LocalNotifications.prototype, "un", null);
    /**
     * @name Local Notifications
     * @description
     * This plugin allows you to display local notifications on the device
     *
     * @usage
     * ```typescript
     * import { LocalNotifications } from '@ionic-native/local-notifications';
     *
     *
     * constructor(private localNotifications: LocalNotifications) { }
     *
     * ...
     *
     *
     * // Schedule a single notification
     * this.localNotifications.schedule({
     *   id: 1,
     *   text: 'Single ILocalNotification',
     *   sound: isAndroid? 'file://sound.mp3': 'file://beep.caf',
     *   data: { secret: key }
     * });
     *
     *
     * // Schedule multiple notifications
     * this.localNotifications.schedule([{
     *    id: 1,
     *    text: 'Multi ILocalNotification 1',
     *    sound: isAndroid ? 'file://sound.mp3': 'file://beep.caf',
     *    data: { secret:key }
     *   },{
     *    id: 2,
     *    title: 'Local ILocalNotification Example',
     *    text: 'Multi ILocalNotification 2',
     *    icon: 'http://example.com/icon.png'
     * }]);
     *
     *
     * // Schedule delayed notification
     * this.localNotifications.schedule({
     *    text: 'Delayed ILocalNotification',
     *    at: new Date(new Date().getTime() + 3600),
     *    led: 'FF0000',
     *    sound: null
     * });
     * ```
     * @interfaces
     * ILocalNotification
     */
    LocalNotifications = __decorate([
        Plugin({
            pluginName: 'LocalNotifications',
            plugin: 'de.appplant.cordova.plugin.local-notification',
            pluginRef: 'cordova.plugins.notification.local',
            repo: 'https://github.com/katzer/cordova-plugin-local-notifications',
            platforms: ['Android', 'iOS', 'Windows']
        })
    ], LocalNotifications);
    return LocalNotifications;
}(IonicNativePlugin));
export { LocalNotifications };
//# sourceMappingURL=index.js.map